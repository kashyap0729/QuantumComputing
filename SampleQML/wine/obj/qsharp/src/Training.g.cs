//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"DefaultSchedule\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"samples\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.MachineLearning\",\"Name\":\"LabeledSample\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":49}}]}}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":33}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.MachineLearning\",\"Name\":\"LabeledSample\",\"Range\":{\"Case\":\"Null\"}}]}]},\"ReturnType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.MachineLearning\",\"Name\":\"SamplingSchedule\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":55},\"Item2\":{\"Line\":1,\"Column\":71}}]}}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"DefaultSchedule\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"ClassifierStructure\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":18,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":29}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.MachineLearning\",\"Name\":\"ControlledRotation\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":34},\"Item2\":{\"Line\":1,\"Column\":52}}]}}]}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"ClassifierStructure\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":18,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":29}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"SampleSingleParameter\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":27,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"Double\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"SampleSingleParameter\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":27,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"SampleParametersForSequence\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":38}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"structure\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.MachineLearning\",\"Name\":\"ControlledRotation\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":69}}]}}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":48}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.MachineLearning\",\"Name\":\"ControlledRotation\",\"Range\":{\"Case\":\"Null\"}}]}]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"SampleParametersForSequence\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":38}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"SampleInitialParameters\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":35,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nInitialParameterSets\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":56}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"structure\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.MachineLearning\",\"Name\":\"ControlledRotation\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":76},\"Item2\":{\"Line\":1,\"Column\":94}}]}}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":64},\"Item2\":{\"Line\":1,\"Column\":73}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.MachineLearning\",\"Name\":\"ControlledRotation\",\"Range\":{\"Case\":\"Null\"}}]}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"SampleInitialParameters\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":35,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"TrainWineModel\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":39,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},{\"Case\":\"Double\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"TrainWineModel\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":39,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"ValidateWineModel\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":67,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"parameters\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bias\"]},\"Type\":{\"Case\":\"Double\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":13}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},{\"Case\":\"Double\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"ValidateWineModel\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum Computing\\\\SampleQML\\\\wine\\\\Training.qs\",\"Position\":{\"Item1\":67,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
#line hidden
namespace Microsoft.Quantum.Samples
{
    [SourceLocation("D:\\Quantum Computing\\SampleQML\\wine\\Training.qs", OperationFunctor.Body, 13, 19)]
    public partial class DefaultSchedule : Function<IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>, Microsoft.Quantum.MachineLearning.SamplingSchedule>, ICallable
    {
        public DefaultSchedule(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "DefaultSchedule";
        String ICallable.FullName => "Microsoft.Quantum.Samples.DefaultSchedule";
        protected ICallable<IQArray<QRange>, Microsoft.Quantum.MachineLearning.SamplingSchedule> Microsoft__Quantum__MachineLearning__SamplingSchedule
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        public override Func<IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>, Microsoft.Quantum.MachineLearning.SamplingSchedule> __Body__ => (__in__) =>
        {
            var samples = __in__;
#line 14 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            return new Microsoft.Quantum.MachineLearning.SamplingSchedule(new QArray<QRange>(new QRange(0L, (samples.Length - 1L))));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__MachineLearning__SamplingSchedule = this.__Factory__.Get<ICallable<IQArray<QRange>, Microsoft.Quantum.MachineLearning.SamplingSchedule>>(typeof(global::Microsoft.Quantum.MachineLearning.SamplingSchedule));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __DataIn__(IQArray<Microsoft.Quantum.MachineLearning.LabeledSample> data) => data;
        public override IApplyData __DataOut__(Microsoft.Quantum.MachineLearning.SamplingSchedule data) => data;
        public static System.Threading.Tasks.Task<Microsoft.Quantum.MachineLearning.SamplingSchedule> Run(IOperationFactory __m__, IQArray<Microsoft.Quantum.MachineLearning.LabeledSample> samples)
        {
            return __m__.Run<DefaultSchedule, IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>, Microsoft.Quantum.MachineLearning.SamplingSchedule>(samples);
        }
    }

    [SourceLocation("D:\\Quantum Computing\\SampleQML\\wine\\Training.qs", OperationFunctor.Body, 19, 28)]
    public partial class ClassifierStructure : Function<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>, ICallable
    {
        public ClassifierStructure(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "ClassifierStructure";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ClassifierStructure";
        protected ICallable<IQArray<IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> Microsoft__Quantum__MachineLearning__CombinedStructure
        {
            get;
            set;
        }

        protected ICallable<(Int64,Pauli), IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> Microsoft__Quantum__MachineLearning__LocalRotationsLayer
        {
            get;
            set;
        }

        protected ICallable<(Int64,Pauli,Int64), IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> Microsoft__Quantum__MachineLearning__CyclicEntanglingLayer
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,Pauli), IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> Microsoft__Quantum__MachineLearning__PartialRotationsLayer
        {
            get;
            set;
        }

        public override Func<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> __Body__ => (__in__) =>
        {
#line 20 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            return Microsoft__Quantum__MachineLearning__CombinedStructure.Apply(new QArray<IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>(Microsoft__Quantum__MachineLearning__LocalRotationsLayer.Apply((4L, Pauli.PauliZ)), Microsoft__Quantum__MachineLearning__LocalRotationsLayer.Apply((4L, Pauli.PauliX)), Microsoft__Quantum__MachineLearning__CyclicEntanglingLayer.Apply((4L, Pauli.PauliX, 1L)), Microsoft__Quantum__MachineLearning__PartialRotationsLayer.Apply((new QArray<Int64>(3L), Pauli.PauliX))));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__MachineLearning__CombinedStructure = this.__Factory__.Get<ICallable<IQArray<IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>>(typeof(global::Microsoft.Quantum.MachineLearning.CombinedStructure));
            this.Microsoft__Quantum__MachineLearning__LocalRotationsLayer = this.__Factory__.Get<ICallable<(Int64,Pauli), IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>>(typeof(global::Microsoft.Quantum.MachineLearning.LocalRotationsLayer));
            this.Microsoft__Quantum__MachineLearning__CyclicEntanglingLayer = this.__Factory__.Get<ICallable<(Int64,Pauli,Int64), IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>>(typeof(global::Microsoft.Quantum.MachineLearning.CyclicEntanglingLayer));
            this.Microsoft__Quantum__MachineLearning__PartialRotationsLayer = this.__Factory__.Get<ICallable<(IQArray<Int64>,Pauli), IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>>(typeof(global::Microsoft.Quantum.MachineLearning.PartialRotationsLayer));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> Run(IOperationFactory __m__)
        {
            return __m__.Run<ClassifierStructure, QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>(QVoid.Instance);
        }
    }

    [SourceLocation("D:\\Quantum Computing\\SampleQML\\wine\\Training.qs", OperationFunctor.Body, 28, 32)]
    public partial class SampleSingleParameter : Operation<QVoid, Double>, ICallable
    {
        public SampleSingleParameter(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "SampleSingleParameter";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SampleSingleParameter";
        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        protected ICallable<(Double,Double), Double> Microsoft__Quantum__Random__DrawRandomDouble
        {
            get;
            set;
        }

        public override Func<QVoid, Double> __Body__ => (__in__) =>
        {
#line 29 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            return (Microsoft__Quantum__Math__PI.Apply(QVoid.Instance) * (Microsoft__Quantum__Random__DrawRandomDouble.Apply((0D, 1D)) - 1D));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
            this.Microsoft__Quantum__Random__DrawRandomDouble = this.__Factory__.Get<ICallable<(Double,Double), Double>>(typeof(global::Microsoft.Quantum.Random.DrawRandomDouble));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(Double data) => new QTuple<Double>(data);
        public static System.Threading.Tasks.Task<Double> Run(IOperationFactory __m__)
        {
            return __m__.Run<SampleSingleParameter, QVoid, Double>(QVoid.Instance);
        }
    }

    [SourceLocation("D:\\Quantum Computing\\SampleQML\\wine\\Training.qs", OperationFunctor.Body, 32, 36)]
    public partial class SampleParametersForSequence : Operation<IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>, IQArray<Double>>, ICallable
    {
        public SampleParametersForSequence(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "SampleParametersForSequence";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SampleParametersForSequence";
        protected ICallable Microsoft__Quantum__Arrays__ForEach
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> SampleSingleParameter__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__ConstantArray
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        public override Func<IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>, IQArray<Double>> __Body__ => (__in__) =>
        {
            var structure = __in__;
#line 33 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            return Microsoft__Quantum__Arrays__ForEach.Apply<IQArray<Double>>((SampleSingleParameter__, Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<QVoid>>((structure.Length, QVoid.Instance))));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arrays__ForEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ForEach<,>));
            this.SampleSingleParameter__ = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(SampleSingleParameter));
            this.Microsoft__Quantum__Arrays__ConstantArray = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ConstantArray<>));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __DataIn__(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation> data) => data;
        public override IApplyData __DataOut__(IQArray<Double> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Double>> Run(IOperationFactory __m__, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation> structure)
        {
            return __m__.Run<SampleParametersForSequence, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>, IQArray<Double>>(structure);
        }
    }

    [SourceLocation("D:\\Quantum Computing\\SampleQML\\wine\\Training.qs", OperationFunctor.Body, 36, 40)]
    public partial class SampleInitialParameters : Operation<(Int64,IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>), IQArray<IQArray<Double>>>, ICallable
    {
        public SampleInitialParameters(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>)>, IApplyData
        {
            public In((Int64,IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "SampleInitialParameters";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SampleInitialParameters";
        protected ICallable Microsoft__Quantum__Arrays__ForEach
        {
            get;
            set;
        }

        protected ICallable<IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>, IQArray<Double>> SampleParametersForSequence__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__ConstantArray
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>), IQArray<IQArray<Double>>> __Body__ => (__in__) =>
        {
            var (nInitialParameterSets,structure) = __in__;
#line 37 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            return Microsoft__Quantum__Arrays__ForEach.Apply<IQArray<IQArray<Double>>>((SampleParametersForSequence__, Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>>((nInitialParameterSets, structure))));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arrays__ForEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ForEach<,>));
            this.SampleParametersForSequence__ = this.__Factory__.Get<ICallable<IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>, IQArray<Double>>>(typeof(SampleParametersForSequence));
            this.Microsoft__Quantum__Arrays__ConstantArray = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ConstantArray<>));
        }

        public override IApplyData __DataIn__((Int64,IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<IQArray<Double>> data) => data;
        public static System.Threading.Tasks.Task<IQArray<IQArray<Double>>> Run(IOperationFactory __m__, Int64 nInitialParameterSets, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation> structure)
        {
            return __m__.Run<SampleInitialParameters, (Int64,IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>), IQArray<IQArray<Double>>>((nInitialParameterSets, structure));
        }
    }

    [SourceLocation("D:\\Quantum Computing\\SampleQML\\wine\\Training.qs", OperationFunctor.Body, 40, 68)]
    public partial class TrainWineModel : Operation<QVoid, (IQArray<Double>,Double)>, ICallable
    {
        public TrainWineModel(IOperationFactory m) : base(m)
        {
        }

        public class Out : QTuple<(IQArray<Double>,Double)>, IApplyData
        {
            public Out((IQArray<Double>,Double) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "TrainWineModel";
        String ICallable.FullName => "Microsoft.Quantum.Samples.TrainWineModel";
        protected ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>> Microsoft__Quantum__MachineLearning__Datasets__WineData
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> ClassifierStructure__
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>), IQArray<IQArray<Double>>> SampleInitialParameters__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Microsoft.Quantum.MachineLearning.SequentialModel>,IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>,Microsoft.Quantum.MachineLearning.TrainingOptions,Microsoft.Quantum.MachineLearning.SamplingSchedule,Microsoft.Quantum.MachineLearning.SamplingSchedule), (Microsoft.Quantum.MachineLearning.SequentialModel,Int64)> Microsoft__Quantum__MachineLearning__TrainSequentialClassifier
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Mapped
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double), Microsoft.Quantum.MachineLearning.SequentialModel> Microsoft__Quantum__MachineLearning__SequentialModel
        {
            get;
            set;
        }

        protected ICallable<QVoid, Microsoft.Quantum.MachineLearning.TrainingOptions> Microsoft__Quantum__MachineLearning__DefaultTrainingOptions
        {
            get;
            set;
        }

        protected ICallable<IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>, Microsoft.Quantum.MachineLearning.SamplingSchedule> DefaultSchedule__
        {
            get;
            set;
        }

        public override Func<QVoid, (IQArray<Double>,Double)> __Body__ => (__in__) =>
        {
#line 42 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            var samples = (IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>)Microsoft__Quantum__MachineLearning__Datasets__WineData.Apply(QVoid.Instance).Slice(new QRange(0L, 142L));
#line 43 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            var structure = (IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>)ClassifierStructure__.Apply(QVoid.Instance);
#line 45 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            var initialParameters = (IQArray<IQArray<Double>>)SampleInitialParameters__.Apply((16L, structure));
#line 47 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            Message__.Apply("Ready to train.");
#line 48 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            var (optimizedModel,nMisses) = Microsoft__Quantum__MachineLearning__TrainSequentialClassifier.Apply((Microsoft__Quantum__Arrays__Mapped.Apply<IQArray<Microsoft.Quantum.MachineLearning.SequentialModel>>((Microsoft__Quantum__MachineLearning__SequentialModel.Partial(new Func<IQArray<Double>, (IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double)>((__arg1__) => (structure, __arg1__, 0D))), initialParameters)), samples, new Microsoft.Quantum.MachineLearning.TrainingOptions((0.4D, 0.01D, 2L, 10000L, 16L, Microsoft__Quantum__MachineLearning__DefaultTrainingOptions.Apply(QVoid.Instance).Data.Item6, Microsoft__Quantum__MachineLearning__DefaultTrainingOptions.Apply(QVoid.Instance).Data.Item7, Microsoft__Quantum__MachineLearning__DefaultTrainingOptions.Apply(QVoid.Instance).Data.Item8, Message__)), DefaultSchedule__.Apply(samples), DefaultSchedule__.Apply(samples)));
#line 64 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            Message__.Apply(String.Format("Training complete, found optimal parameters and bias: {0}, {1}", optimizedModel.Parameters, optimizedModel.Bias));
#line 65 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            return (optimizedModel.Parameters, optimizedModel.Bias);
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__MachineLearning__Datasets__WineData = this.__Factory__.Get<ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>>>(typeof(global::Microsoft.Quantum.MachineLearning.Datasets.WineData));
            this.ClassifierStructure__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>>(typeof(ClassifierStructure));
            this.SampleInitialParameters__ = this.__Factory__.Get<ICallable<(Int64,IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>), IQArray<IQArray<Double>>>>(typeof(SampleInitialParameters));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Microsoft__Quantum__MachineLearning__TrainSequentialClassifier = this.__Factory__.Get<ICallable<(IQArray<Microsoft.Quantum.MachineLearning.SequentialModel>,IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>,Microsoft.Quantum.MachineLearning.TrainingOptions,Microsoft.Quantum.MachineLearning.SamplingSchedule,Microsoft.Quantum.MachineLearning.SamplingSchedule), (Microsoft.Quantum.MachineLearning.SequentialModel,Int64)>>(typeof(global::Microsoft.Quantum.MachineLearning.TrainSequentialClassifier));
            this.Microsoft__Quantum__Arrays__Mapped = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Mapped<,>));
            this.Microsoft__Quantum__MachineLearning__SequentialModel = this.__Factory__.Get<ICallable<(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double), Microsoft.Quantum.MachineLearning.SequentialModel>>(typeof(global::Microsoft.Quantum.MachineLearning.SequentialModel));
            this.Microsoft__Quantum__MachineLearning__DefaultTrainingOptions = this.__Factory__.Get<ICallable<QVoid, Microsoft.Quantum.MachineLearning.TrainingOptions>>(typeof(global::Microsoft.Quantum.MachineLearning.DefaultTrainingOptions));
            this.DefaultSchedule__ = this.__Factory__.Get<ICallable<IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>, Microsoft.Quantum.MachineLearning.SamplingSchedule>>(typeof(DefaultSchedule));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__((IQArray<Double>,Double) data) => new Out(data);
        public static System.Threading.Tasks.Task<(IQArray<Double>,Double)> Run(IOperationFactory __m__)
        {
            return __m__.Run<TrainWineModel, QVoid, (IQArray<Double>,Double)>(QVoid.Instance);
        }
    }

    [SourceLocation("D:\\Quantum Computing\\SampleQML\\wine\\Training.qs", OperationFunctor.Body, 68, -1)]
    public partial class ValidateWineModel : Operation<(IQArray<Double>,Double), Int64>, ICallable
    {
        public ValidateWineModel(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Double>,Double)>, IApplyData
        {
            public In((IQArray<Double>,Double) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "ValidateWineModel";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ValidateWineModel";
        protected ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>> Microsoft__Quantum__MachineLearning__Datasets__WineData
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<(Microsoft.Quantum.MachineLearning.SequentialModel,IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>,Double,Int64,Microsoft.Quantum.MachineLearning.SamplingSchedule), Microsoft.Quantum.MachineLearning.ValidationResults> Microsoft__Quantum__MachineLearning__ValidateSequentialClassifier
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double), Microsoft.Quantum.MachineLearning.SequentialModel> Microsoft__Quantum__MachineLearning__SequentialModel
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> ClassifierStructure__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>, Microsoft.Quantum.MachineLearning.SamplingSchedule> DefaultSchedule__
        {
            get;
            set;
        }

        public override Func<(IQArray<Double>,Double), Int64> __Body__ => (__in__) =>
        {
            var (parameters,bias) = __in__;
#line 73 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            var samples = (IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>)Microsoft__Quantum__MachineLearning__Datasets__WineData.Apply(QVoid.Instance).Slice(new QRange(143L, (Microsoft__Quantum__MachineLearning__Datasets__WineData.Apply(QVoid.Instance).Length - 1L)));
#line 74 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            var tolerance = 0.005D;
#line 75 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            var nMeasurements = 10000L;
#line 76 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            var results = Microsoft__Quantum__MachineLearning__ValidateSequentialClassifier.Apply((new Microsoft.Quantum.MachineLearning.SequentialModel((ClassifierStructure__.Apply(QVoid.Instance), parameters, bias)), samples, tolerance, nMeasurements, DefaultSchedule__.Apply(samples)));
#line 83 "D:\\Quantum Computing\\SampleQML\\wine\\Training.qs"
            return results.NMisclassifications;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__MachineLearning__Datasets__WineData = this.__Factory__.Get<ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>>>(typeof(global::Microsoft.Quantum.MachineLearning.Datasets.WineData));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__MachineLearning__ValidateSequentialClassifier = this.__Factory__.Get<ICallable<(Microsoft.Quantum.MachineLearning.SequentialModel,IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>,Double,Int64,Microsoft.Quantum.MachineLearning.SamplingSchedule), Microsoft.Quantum.MachineLearning.ValidationResults>>(typeof(global::Microsoft.Quantum.MachineLearning.ValidateSequentialClassifier));
            this.Microsoft__Quantum__MachineLearning__SequentialModel = this.__Factory__.Get<ICallable<(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double), Microsoft.Quantum.MachineLearning.SequentialModel>>(typeof(global::Microsoft.Quantum.MachineLearning.SequentialModel));
            this.ClassifierStructure__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>>(typeof(ClassifierStructure));
            this.DefaultSchedule__ = this.__Factory__.Get<ICallable<IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>, Microsoft.Quantum.MachineLearning.SamplingSchedule>>(typeof(DefaultSchedule));
        }

        public override IApplyData __DataIn__((IQArray<Double>,Double) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, IQArray<Double> parameters, Double bias)
        {
            return __m__.Run<ValidateWineModel, (IQArray<Double>,Double), Int64>((parameters, bias));
        }
    }
}